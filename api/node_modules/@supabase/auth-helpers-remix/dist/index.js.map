{"version":3,"sources":["../src/index.ts","../src/createSupabaseClient.ts"],"sourcesContent":["// Methods\nexport { createBrowserClient, createServerClient } from './createSupabaseClient';\n\n// Types\nexport type { Session, User, SupabaseClient } from '@supabase/supabase-js';\n","import {\n\tBrowserCookieAuthStorageAdapter,\n\tCookieAuthStorageAdapter,\n\tCookieOptions,\n\tCookieOptionsWithName,\n\tcreateSupabaseClient,\n\tparseCookies,\n\tserializeCookie,\n\tSupabaseClientOptionsWithoutAuth\n} from '@supabase/auth-helpers-shared';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { GenericSchema } from '@supabase/supabase-js/dist/module/lib/types';\n\n/**\n * ## Authenticated Supabase client\n * ### Loader\n *\n * ```ts\n * import { createServerClient } from '@supabase/auth-helpers-remix';\n *\n * export const loader = async ({ request }: { request: Request }) => {\n *   const response = new Response();\n *\n *   const supabaseClient = createServerClient(\n *     process.env.SUPABASE_URL,\n *     process.env.SUPABASE_ANON_KEY,\n *     { request, response }\n *   );\n *\n *   const { data } = await supabaseClient.from('test').select('*');\n *\n *   return json(\n *    { data },\n *    { headers: response.headers }\n *   );\n * };\n * ```\n *\n * ### Action\n *\n * ```ts\n * import { createServerClient } from '@supabase/auth-helpers-remix';\n *\n * export const action = async ({ request }: { request: Request }) => {\n *   const response = new Response();\n *\n *   const supabaseClient = createServerClient(\n *     process.env.SUPABASE_URL,\n *     process.env.SUPABASE_ANON_KEY,\n *     { request, response }\n *   );\n *\n *   const { data } = await supabaseClient.from('test').select('*');\n *\n *   return json(\n *    { data },\n *    { headers: response.headers }\n *   );\n * };\n * ```\n *\n * ### Component\n *\n * ```ts\n * import { createBrowserClient } from '@supabase/auth-helpers-remix';\n *\n * useEffect(() => {\n *   const supabaseClient = createBrowserClient(\n *     window.env.SUPABASE_URL,\n *     window.env.SUPABASE_ANON_KEY\n *   );\n *\n *   const getData = async () => {\n *     const { data: supabaseData } = await supabaseClient\n *       .from('test')\n *       .select('*');\n *\n *     console.log({ data });\n *   };\n *\n *   getData();\n * }, []);\n * ```\n *\n * Note: window.env is not automatically populated by Remix\n * Check out the [example app](../../../../examples/remix/app/root.tsx) or\n * [Remix docs](https://remix.run/docs/en/v1/guides/envvars#browser-environment-variables) for more info\n */\n\nexport function createBrowserClient<\n\tDatabase = any,\n\tSchemaName extends string & keyof Database = 'public' extends keyof Database\n\t\t? 'public'\n\t\t: string & keyof Database,\n\tSchema extends GenericSchema = Database[SchemaName] extends GenericSchema\n\t\t? Database[SchemaName]\n\t\t: any\n>(\n\tsupabaseUrl: string,\n\tsupabaseKey: string,\n\t{\n\t\toptions,\n\t\tcookieOptions\n\t}: {\n\t\toptions?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n\t\tcookieOptions?: CookieOptionsWithName;\n\t} = {}\n): SupabaseClient<Database, SchemaName, Schema> {\n\tif (!supabaseUrl || !supabaseKey) {\n\t\tthrow new Error(\n\t\t\t'supabaseUrl and supabaseKey are required to create a Supabase client! Find these under `Settings` > `API` in your Supabase dashboard.'\n\t\t);\n\t}\n\n\treturn createSupabaseClient<Database, SchemaName, Schema>(supabaseUrl, supabaseKey, {\n\t\t...options,\n\t\tglobal: {\n\t\t\t...options?.global,\n\t\t\theaders: {\n\t\t\t\t...options?.global?.headers,\n\t\t\t\t'X-Client-Info': `${PACKAGE_NAME}@${PACKAGE_VERSION}`\n\t\t\t}\n\t\t},\n\t\tauth: {\n\t\t\tstorageKey: cookieOptions?.name,\n\t\t\tstorage: new BrowserCookieAuthStorageAdapter(cookieOptions)\n\t\t}\n\t});\n}\n\nclass RemixServerAuthStorageAdapter extends CookieAuthStorageAdapter {\n\tconstructor(\n\t\tprivate readonly request: Request,\n\t\tprivate readonly response: Response,\n\t\tcookieOptions?: CookieOptions\n\t) {\n\t\tsuper(cookieOptions);\n\t}\n\n\tprotected getCookie(name: string): string | null | undefined {\n\t\treturn parseCookies(this.request?.headers?.get('Cookie') ?? '')[name];\n\t}\n\tprotected setCookie(name: string, value: string): void {\n\t\tconst cookieStr = serializeCookie(name, value, {\n\t\t\t...this.cookieOptions,\n\t\t\t// Allow supabase-js on the client to read the cookie as well\n\t\t\thttpOnly: false\n\t\t});\n\t\tthis.response.headers.append('set-cookie', cookieStr);\n\t}\n\tprotected deleteCookie(name: string): void {\n\t\tconst cookieStr = serializeCookie(name, '', {\n\t\t\t...this.cookieOptions,\n\t\t\tmaxAge: 0,\n\t\t\t// Allow supabase-js on the client to read the cookie as well\n\t\t\thttpOnly: false\n\t\t});\n\t\tthis.response.headers.append('set-cookie', cookieStr);\n\t}\n}\n\nexport function createServerClient<\n\tDatabase = any,\n\tSchemaName extends string & keyof Database = 'public' extends keyof Database\n\t\t? 'public'\n\t\t: string & keyof Database,\n\tSchema extends GenericSchema = Database[SchemaName] extends GenericSchema\n\t\t? Database[SchemaName]\n\t\t: any\n>(\n\tsupabaseUrl: string,\n\tsupabaseKey: string,\n\t{\n\t\trequest,\n\t\tresponse,\n\t\toptions,\n\t\tcookieOptions\n\t}: {\n\t\trequest: Request;\n\t\tresponse: Response;\n\t\toptions?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n\t\tcookieOptions?: CookieOptionsWithName;\n\t}\n): SupabaseClient<Database, SchemaName, Schema> {\n\tif (!supabaseUrl || !supabaseKey) {\n\t\tthrow new Error(\n\t\t\t'supabaseUrl and supabaseKey are required to create a Supabase client! Find these under `Settings` > `API` in your Supabase dashboard.'\n\t\t);\n\t}\n\n\tif (!request || !response) {\n\t\tthrow new Error(\n\t\t\t'request and response must be passed to createSupabaseClient function, when called from loader or action'\n\t\t);\n\t}\n\n\treturn createSupabaseClient<Database, SchemaName, Schema>(supabaseUrl, supabaseKey, {\n\t\t...options,\n\t\tglobal: {\n\t\t\t...options?.global,\n\t\t\theaders: {\n\t\t\t\t...options?.global?.headers,\n\t\t\t\t'X-Client-Info': `${PACKAGE_NAME}@${PACKAGE_VERSION}`\n\t\t\t}\n\t\t},\n\t\tauth: {\n\t\t\tstorageKey: cookieOptions?.name,\n\t\t\tstorage: new RemixServerAuthStorageAdapter(request, response, cookieOptions)\n\t\t}\n\t});\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,iCASO;AAgFA,SAAS,oBASf,aACA,aACA;AAAA,EACC;AAAA,EACA;AACD,IAGI,CAAC,GAC0C;AA3GhD;AA4GC,MAAI,CAAC,eAAe,CAAC,aAAa;AACjC,UAAM,IAAI;AAAA,MACT;AAAA,IACD;AAAA,EACD;AAEA,aAAO,iDAAmD,aAAa,aAAa;AAAA,IACnF,GAAG;AAAA,IACH,QAAQ;AAAA,MACP,GAAG,mCAAS;AAAA,MACZ,SAAS;AAAA,QACR,IAAG,wCAAS,WAAT,mBAAiB;AAAA,QACpB,iBAAiB,GAAG,kCAAgB;AAAA,MACrC;AAAA,IACD;AAAA,IACA,MAAM;AAAA,MACL,YAAY,+CAAe;AAAA,MAC3B,SAAS,IAAI,2DAAgC,aAAa;AAAA,IAC3D;AAAA,EACD,CAAC;AACF;AAEA,IAAM,gCAAN,cAA4C,oDAAyB;AAAA,EACpE,YACkB,SACA,UACjB,eACC;AACD,UAAM,aAAa;AAJF;AACA;AAAA,EAIlB;AAAA,EAEU,UAAU,MAAyC;AA3I9D;AA4IE,eAAO,2CAAa,gBAAK,YAAL,mBAAc,YAAd,mBAAuB,IAAI,cAAa,EAAE,EAAE;AAAA,EACjE;AAAA,EACU,UAAU,MAAc,OAAqB;AACtD,UAAM,gBAAY,4CAAgB,MAAM,OAAO;AAAA,MAC9C,GAAG,KAAK;AAAA,MAER,UAAU;AAAA,IACX,CAAC;AACD,SAAK,SAAS,QAAQ,OAAO,cAAc,SAAS;AAAA,EACrD;AAAA,EACU,aAAa,MAAoB;AAC1C,UAAM,gBAAY,4CAAgB,MAAM,IAAI;AAAA,MAC3C,GAAG,KAAK;AAAA,MACR,QAAQ;AAAA,MAER,UAAU;AAAA,IACX,CAAC;AACD,SAAK,SAAS,QAAQ,OAAO,cAAc,SAAS;AAAA,EACrD;AACD;AAEO,SAAS,mBASf,aACA,aACA;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD,GAM+C;AAvLhD;AAwLC,MAAI,CAAC,eAAe,CAAC,aAAa;AACjC,UAAM,IAAI;AAAA,MACT;AAAA,IACD;AAAA,EACD;AAEA,MAAI,CAAC,WAAW,CAAC,UAAU;AAC1B,UAAM,IAAI;AAAA,MACT;AAAA,IACD;AAAA,EACD;AAEA,aAAO,iDAAmD,aAAa,aAAa;AAAA,IACnF,GAAG;AAAA,IACH,QAAQ;AAAA,MACP,GAAG,mCAAS;AAAA,MACZ,SAAS;AAAA,QACR,IAAG,wCAAS,WAAT,mBAAiB;AAAA,QACpB,iBAAiB,GAAG,kCAAgB;AAAA,MACrC;AAAA,IACD;AAAA,IACA,MAAM;AAAA,MACL,YAAY,+CAAe;AAAA,MAC3B,SAAS,IAAI,8BAA8B,SAAS,UAAU,aAAa;AAAA,IAC5E;AAAA,EACD,CAAC;AACF;","names":[]}